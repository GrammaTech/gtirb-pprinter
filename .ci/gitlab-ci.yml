variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GTIRB_BRANCH: "release-1.10.8"
  CAPSTONE_BRANCH: "capstone-5.0.0-gt2"
  # The following two variables are used by the package uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID
  XFORM_BINARIES: "bin/gtirb-pprinter bin/gtirb-layout lib/libgtirb_pprinter.so lib/libgtirb_layout.so"

default:
  tags: [cluster]

stages:
  - check-format
  - build
  - xform
  - test-and-tag
  - build-packages
  - test-packages-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-to-apt
  - upload

check-format:
  stage: check-format
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.linux-conan-template: &linux-conan
  stage: build
  needs: [check-format]
  variables:
    CONAN_PASSWORD: $CI_JOB_TOKEN
  script:
    - pip3 install --upgrade conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/build.py

build-conan-linux-gcc9:
  image: conanio/gcc9
  <<: *linux-conan

.conan-windows: &conan-windows
  stage: deploy
  needs: [check-format]
  tags: [ddisasm-windows]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-pprinter*.zip
  script:
    # Setting CI_PROJECT_DIR to $(pwd) because CI doesn't properly set CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=`cygpath -w $(pwd)`
    # Initialize
    - systeminfo
    - python -m pip install --upgrade conan pip
    - python -m pip install -r tests/requirements.txt $EXTRA_INDEX_URL
    - export PYTHONPATH=$CI_PROJECT_DIR
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - CONAN_PASSWORD=$CI_JOB_TOKEN conan user ci_user -r gitlab -p
    # Build
    - python .ci/build.py -s build_type=$BUILD_TYPE
    # Install
      # Python print() on Windows returns CRLF and will cause issues in CI - use "print('string', end='')" when outputting from python.
    - export PKG_INSTALL_NAME=`python -c "import conanfile; print(conanfile.Properties().conan_recipe, end='')"`
    - conan install $PKG_INSTALL_NAME -g deploy --build=missing --install-folder="./packages"
    # Package
    - export PKG_NAME=`conan inspect . --raw name`
    - export PKG_VERSION=`conan inspect . --raw version`
    - export PKG_ARCH=`uname -m`
    - export PKG_FILENAME="${CI_PROJECT_DIR}\\${PKG_NAME}-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - |+
      for PKG_DIR in ./packages/*/; do
        PKG_DIR_NAME=`basename $PKG_DIR`
        for PKG_SUBDIR in ./packages/$PKG_DIR_NAME/*/; do
          PKG_SUBDIR_NAME=`basename $PKG_SUBDIR`
          PKG_FILE_DEST="./package/${PKG_NAME}/${PKG_SUBDIR_NAME}"
          [ -d $PKG_FILE_DEST ] || mkdir -p $PKG_FILE_DEST
          if [ $PKG_SUBDIR_NAME != 'licenses' ]; then
            cp -r $PKG_SUBDIR/* $PKG_FILE_DEST
          else
            for PKG_LICENSE in $PKG_SUBDIR/*; do
              cp $PKG_LICENSE $PKG_FILE_DEST/LICENSE-$PKG_DIR_NAME
            done
          fi
        done
      done
    - cd ./package
    - zip -r $PKG_FILENAME ./

conan-windows-debug:
  variables:
    BUILD_TYPE: 'Debug'
  <<: *conan-windows

conan-windows-release:
  variables:
    BUILD_TYPE: 'Release'
  <<: *conan-windows

.ubuntu-deps:
  &ubuntu-deps
  - case $OS in
     ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
     esac
  # download capstone & gtirb
  - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fextra-packages/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
  - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fgtirb/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb.zip"
  - for pkg in gtirb capstone; do unzip $pkg.zip; done
  - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-dev.deb

.build-template: &build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'build'
  script:
    - *ubuntu-deps
    - mkdir build && cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=$COMPILER -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DGTIRB_PPRINTER_STRIP_DEBUG_SYMBOLS=On
    - make -j

.test-and-tag-ubuntu-template: &test-and-tag-ubuntu
  stage: test-and-tag
  script:
    - *ubuntu-deps
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

build-ubuntu20-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc-gcov:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  stage: build
  variables:
    OS: 'ubuntu20'
  script:
    - *ubuntu-deps
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_CODE_COVERAGE=On
    - make -j
    - make test
    - cd ..
    - gcovr -e build --fail-under-line 40

build-ubuntu20-gcc-debug:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-ubuntu20-clang-debug:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  script:
    - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fextra-packages/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    # Ensure that we produced a .a file instead of a .so.
    - '[ -e lib/libgtirb_pprinter.a ]'
    - '[ ! -e lib/libgtirb_pprinter.so ]'
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V

static-drivers:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  needs: []
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fextra-packages/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_STATIC_DRIVERS=ON
    - make -j
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/gtirb-pprinter


.xform: &xform
  stage: xform
  artifacts:
    when: always
    paths:
      - build
  services:
    - name: docker.grammatech.com/rewriting/gtirb-server
      alias: gtirb-server
  allow_failure: true
  script:
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        curl -F transform=ddisasm -F binary=@$binary --output $binary.gtirb http://gtirb-server/simple ;
        curl -F transform=stack-stamp -F gtirb=@$binary.gtirb --output $binary.stack-stamp.gtirb http://gtirb-server/simple ;
        curl -F transform=shuffle -F gtirb=@$binary.stack-stamp.gtirb --output $binary.stack-stamp.shuffle.gtirb http://gtirb-server/simple ;
        case "$binary" in
          *.so*) shared="--shared" ;;
          *) shared="" ;;
        esac ;
        ./build/bin/gtirb-pprinter --ir $binary.stack-stamp.shuffle.gtirb --binary $binary.stack-stamp.shuffle -c "-L$(pwd)/build/lib" $shared ;
      done
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        cp $binary.stack-stamp.shuffle $binary ;
      done

xform-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs:
    - job: build-ubuntu20-gcc
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *ubuntu-deps
  <<: *xform

xform-ubuntu20-clang:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs:
    - job: build-ubuntu20-clang-debug
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *ubuntu-deps
  <<: *xform

test-and-tag-xform-ubuntu20:
  variables:
    OS: 'ubuntu20'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['xform-ubuntu20']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-xform-ubuntu20-clang:
  variables:
    OS: 'ubuntu20'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['xform-ubuntu20-clang']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-ubuntu20-gcc:
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-gcc']
  <<: *test-and-tag-ubuntu

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
  script:
    - export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    - *ubuntu-deps
    - cd build && make install && cd ..
    - rm -rf build
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cp .ci/test-install.cpp test-install.cpp
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - python3 tests/hello_world.py
    - ./test-install hello.gtirb
    - python3 -m unittest discover tests "*_test.py"

# APT packaging related jobs
.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - *ubuntu-deps
    - 'CAPSTONE_PKG_VERSION=$(dpkg --info libcapstone-dev.deb | sed -n "s/Version: //p" | tr -d "[[:space:]]")'
    - echo $CAPSTONE_PKG_VERSION
    - cd build
    - CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib-dbg
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-dev
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver-dbg

build-ubuntu20-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: [build-ubuntu20-gcc]
  variables:
    OS: ubuntu20
  <<: *build-ubuntu-packages

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-packages-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fextra-packages/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - curl -L https://git.grammatech.com/api/v4/projects/rewriting%2Fgtirb/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb.zip"
    - for pkg in gtirb capstone; do unzip $pkg.zip -d apt-repo; done
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-pprinter-dev: &test-ubuntu-libgtirb-pprinter-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
      - hello.gtirb
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dev.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - g++ .ci/test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - python3 tests/hello_world.py
    - ./test-install hello.gtirb

.test-ubuntu-gtirb-pprinter: &test-ubuntu-gtirb-pprinter
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    # just checking that gtirb-pprint and gtirb-layout are on $PATH
    - '[ -f  /usr/bin/gtirb-pprinter ]'
    - '[ -f /usr/bin/gtirb-layout ]'

.test-ubuntu-libgtirb-pprinter-dbg: &test-ubuntu-libgtirb-pprinter-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb_pprinter.so | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-gtirb-pprinter-dbg: &test-ubuntu-gtirb-pprinter-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/gtirb-pprinter | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-libgtirb-pprinter: &test-ubuntu-libgtirb-pprinter
  stage: test-packages2
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install hello.gtirb

setup-ubuntu20-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu20-gtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu20-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu20-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu20-libgtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo', 'test-ubuntu20-libgtirb-pprinter-dev']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release
  <<: *test-ubuntu-libgtirb-pprinter

.deploy-debian-installer: &deploy-debian-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.deb'
  script:
    - cp build/*.deb ./

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  <<: *deploy-debian-installer

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable

.windows-upload: &windows-upload
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [conan-windows-release]

windows-upload-public:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: windows-release

windows-upload-internal:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
  variables:
    JOB_NAME: conan-windows-release
    FILESERVER: internal
    FILESERVER_SUBDIR_NAME: windows-release
