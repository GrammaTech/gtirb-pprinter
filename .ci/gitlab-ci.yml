variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # These variables are used to pin versions on release branches.
  GTIRB_VERSION: "2.1.0"
  CAPSTONE_VERSION: "1:5.0.1-gt"
  CONAN_VERSION: "1.59"
  # The following two variables are used by the package uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID
  CONAN_PASSWORD: $CI_JOB_TOKEN
  XFORM_BINARIES: "bin/gtirb-pprinter bin/gtirb-layout lib/libgtirb_pprinter.so lib/libgtirb_layout.so"
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG"

default:
  tags: [shared]

stages:
  - build-images
  - check-format
  - build
  - xform
  - test-and-tag
  - build-packages
  - test-packages-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-to-apt
  - upload

.publish-rules: &publish-rules
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  - if: $CI_COMMIT_BRANCH
    when: manual
    allow_failure: true

.build-ci-image: &build-ci-image
  stage: build-images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Configure authentication credentials for GitLab
    - >
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to our internal registry
    # If we're on the master branch, also push the latest tag.
    - |
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        export EXTRA_DEST="--destination=${CI_REGISTRY_IMAGE}${IMAGE_NAME}:latest"
      fi
    - >
      /kaniko/executor
      --snapshotMode=redo
      --cache=true
      --cache-repo=${CI_REGISTRY_IMAGE}${IMAGE_NAME}/cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/$DOCKERFILE_PATH
      --destination=${CI_REGISTRY_IMAGE}${IMAGE_NAME}:$IMAGE_TAG
      $EXTRA_DEST
      $EXTRA_ARGS

build-ci-image-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu20
    IMAGE_NAME: /ubuntu20
    EXTRA_ARGS: --build-arg BASE_IMAGE=${DOCKER_REGISTRY}/rewriting/gtirb/ubuntu20:latest

build-ci-image-static:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.static
    IMAGE_NAME: /static

build-ci-image-manylinux2010:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.manylinux2010
    IMAGE_NAME: /manylinux2010_x86_64

check-format:
  stage: check-format
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.setup-conan-linux:
  - export CONAN_USER_HOME=$(pwd)
  - pip3 install --upgrade conan~=$CONAN_VERSION
  - conan profile new default --detect
  - conan profile update settings.compiler.libcxx=libstdc++11 default
  - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
  - conan user ci_user -r gitlab -p

.conan-linux-build-template: &conan-linux-build-template
  stage: build
  needs: [check-format]
  artifacts:
    paths:
      - .conan
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  script:
    - !reference [.setup-conan-linux]
    - sudo apt-get -y update && sudo apt-get -y install gcc-arm-linux-gnueabihf  # needed for tests
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py build

conan-linux-gcc9-build:
  image: conanio/gcc9
  <<: *conan-linux-build-template

.conan-linux-publish-template: &conan-linux-publish-template
  stage: deploy
  rules:
    *publish-rules
  script:
    - export CONAN_USER_HOME=$(pwd)
    - pip3 install --upgrade conan~=$CONAN_VERSION
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py upload

conan-linux-gcc9-publish:
  image: conanio/gcc9
  needs:
    - conan-linux-gcc9-build
  dependencies: [conan-linux-gcc9-build]
  <<: *conan-linux-publish-template

.conan-windows-build-template: &conan-windows-build-template
  stage: build
  needs: [check-format]
  tags: [ddisasm-windows]
  artifacts:
    paths:
      - conan_home.tar.gz
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  script:
    # Setting CI_PROJECT_DIR to $(pwd) because CI doesn't properly set CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=$(pwd)
    # Initialize
    - systeminfo
    - python -m pip install --upgrade conan==$CONAN_VERSION pip
    - python -m pip install -r tests/requirements.txt $EXTRA_INDEX_URL
    - export PYTHONPATH=`cygpath -w $(pwd)`
    # Build conan packages in a known location
    - export CONAN_USER_HOME=$(cygpath -w C:\\)
    # Setup Remote and Authenticate
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Build
    - python .ci/run_conan.py build -o run_tests=False -s build_type=$BUILD_TYPE
    - tar -C $(cygpath -u C:\\) -cvzf conan_home.tar.gz .conan

.conan-windows-test-template: &conan-windows-test-template
  stage: test-and-tag
  tags: [ddisasm-windows]
  script:
    - tar -xf conan_home.tar.gz -C $(cygpath -u C:\\)
    # Install packages needed for the tests
    - python -m pip install -r tests/requirements.txt --extra-index-url=$EXTRA_INDEX_URL --pre
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - export CONAN_USER_HOME=$(cygpath -w C:\\)
    - export CONAN_REF=$(python -c 'print(__import__("conanfile").Properties().conan_recipe, end="")')
    # Change directory to the conan build directory
    - cd $(cygpath -u C:\\)
    - cd $(find .conan -type d -path '*data/gtirb-pprinter/dev/rewriting+gtirb-pprinter/*/build/*' -print -quit)
    # Create virtualrunenv script (activate_run.bat)
    - conan install ${CONAN_REF} -g virtualrunenv
    # Run the tests
    - cmd.exe /C "activate_run.bat && gtirb-pprinter --version && ctest -V"

.windows-zip-package-template: &windows-zip-package-template
  stage: build-packages
  tags: [ddisasm-windows]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - gtirb-pprinter*.zip
  script:
    # Initialize
    - tar -xf conan_home.tar.gz -C $(cygpath -u C:\\)
    # Setting CI_PROJECT_DIR to the PWD because GitLab Runner sets a relative path for CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=$(pwd)
    - export CONAN_USER_HOME=$(cygpath -w C:\\)
    - export PYTHONPATH=`cygpath -w $(pwd)`
    # Prep
    - python -m pip install --upgrade conan==$CONAN_VERSION pip
    # Install
    - python .ci/run_conan.py install --install-folder=./conan-packages
    # Merge Package Files
    - export CONAN_PACKAGES="${CI_PROJECT_DIR}/conan-packages/*"
    - export WINDOWS_PACKAGE_NAME=`conan inspect . --raw name`
    - export WINDOWS_PACKAGE_VERSION=`conan inspect . --raw version`
    - export WINDOWS_PACKAGE_ARCH=`uname -m`
    - export WINDOWS_PACKAGE_DIR="${CI_PROJECT_DIR}/windows-package"
    - export WINDOWS_PACKAGE="${WINDOWS_PACKAGE_DIR}/${WINDOWS_PACKAGE_NAME}"
    - mkdir -p $WINDOWS_PACKAGE
    - |+
      for CONAN_PACKAGE in $CONAN_PACKAGES; do
        if [ -d $CONAN_PACKAGE ]; then
          rsync -a --exclude licenses $CONAN_PACKAGE/ $WINDOWS_PACKAGE/
          if [ -d $CONAN_PACKAGE/licenses ]; then
            CONAN_PACKAGE_NAME=`basename $CONAN_PACKAGE`
            mkdir -p ${WINDOWS_PACKAGE}/licenses/${CONAN_PACKAGE_NAME}
            rsync -a $CONAN_PACKAGE/licenses/ ${WINDOWS_PACKAGE}/licenses/${CONAN_PACKAGE_NAME}/
          fi
        fi
      done
    - cd $WINDOWS_PACKAGE_DIR
    # Runtime Package
    - export WINDOWS_RUNTIME_PACKAGE_ARCHIVE="${CI_PROJECT_DIR}/${WINDOWS_PACKAGE_NAME}-${WINDOWS_PACKAGE_VERSION}.win10.${WINDOWS_PACKAGE_ARCH}.zip"
    - export WINDOWS_RUNTIME_PACKAGE_MANIFEST=(
        "gtirb-pprinter/bin/capstone.dll"
        "gtirb-pprinter/bin/gtirb.dll"
        "gtirb-pprinter/bin/gtirb_layout.dll"
        "gtirb-pprinter/bin/gtirb-layout.exe"
        "gtirb-pprinter/bin/gtirb_pprinter.dll"
        "gtirb-pprinter/bin/gtirb-pprinter.exe"
        "gtirb-pprinter/licenses/capstone/*"
        "gtirb-pprinter/licenses/gtirb/*"
        "gtirb-pprinter/licenses/gtirb-pprinter/*"
      )
    - zip -r $WINDOWS_RUNTIME_PACKAGE_ARCHIVE ${WINDOWS_RUNTIME_PACKAGE_MANIFEST[@]}
    # Developement Package
    - export WINDOWS_DEVELOPEMENT_PACKAGE_ARCHIVE="${CI_PROJECT_DIR}/${WINDOWS_PACKAGE_NAME}-${WINDOWS_PACKAGE_VERSION}-dev.win10.${WINDOWS_PACKAGE_ARCH}.zip"
    - export WINDOWS_DEVELOPEMENT_PACKAGE_MANIFEST=(
        "${WINDOWS_RUNTIME_PACKAGE_MANIFEST[@]}"
        "gtirb-pprinter/lib/capstone.lib"
        "gtirb-pprinter/lib/gtirb.lib"
        "gtirb-pprinter/lib/gtirb_layout.lib"
        "gtirb-pprinter/lib/gtirb_pprinter.lib"
        "gtirb-pprinter/include/capstone"
        "gtirb-pprinter/include/gtirb"
        "gtirb-pprinter/include/gtirb_layout"
        "gtirb-pprinter/include/gtirb_pprinter"
      )
    - zip -r $WINDOWS_DEVELOPEMENT_PACKAGE_ARCHIVE ${WINDOWS_DEVELOPEMENT_PACKAGE_MANIFEST[@]}

.conan-windows-publish-template: &conan-windows-publish-template
  stage: deploy
  tags: [ddisasm-windows]
  rules:
    *publish-rules
  script:
    - export CONAN_USER_HOME=$(cygpath -w C:\\)
    - pip3 install --upgrade conan~=$CONAN_VERSION
    - tar -xf conan_home.tar.gz -C $(cygpath -u C:\\)
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - conan user ci_user -r gitlab -p
    - python .ci/run_conan.py upload

conan-windows-release-build:
  variables:
    BUILD_TYPE: 'Release'
  <<: *conan-windows-build-template

conan-windows-debug-build:
  variables:
    BUILD_TYPE: 'Debug'
  <<: *conan-windows-build-template

conan-windows-release-test:
  needs: [conan-windows-release-build]
  dependencies: [conan-windows-release-build]
  <<: *conan-windows-test-template

windows-zip-release-package:
  needs: [conan-windows-release-build]
  variables:
    BUILD_TYPE: Release
  dependencies: [conan-windows-release-build]
  <<: *windows-zip-package-template

conan-windows-release-publish:
  needs: [conan-windows-release-build]
  variables:
    BUILD_TYPE: Release
  dependencies: [conan-windows-release-build]
  <<: *conan-windows-publish-template

conan-windows-debug-publish:
  needs: [conan-windows-debug-build]
  variables:
    BUILD_TYPE: Debug
  dependencies: [conan-windows-debug-build]
  <<: *conan-windows-publish-template

.setup-apt: &setup-apt
  - DIST_NAME="$(lsb_release -sc)"
  # Configure GTIRB APT repository.
  - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
  - COMPONENT=$([[ $CI_COMMIT_REF_NAME =~ ^release-.* ]] && echo "stable" || echo "unstable")
  - echo "deb https://download.grammatech.com/gtirb/files/apt-repo $DIST_NAME $COMPONENT" | tee -a /etc/apt/sources.list.d/gtirb.list
  - apt-get update -y

.install-deps: &install-deps
  # Install capstone and gtirb.
  - >-
    apt-get install -y
    libcapstone-dev${CAPSTONE_VERSION:+=$CAPSTONE_VERSION}
    libgtirb-dev${GTIRB_VERSION:+=$GTIRB_VERSION-$(lsb_release -sc)}

.install-capstone:
  - DIST_NAME="$(lsb_release -sc)"
  - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
  - COMPONENT=$([[ $CI_COMMIT_REF_NAME =~ ^release-.* ]] && echo "stable" || echo "unstable")
  - echo "deb https://download.grammatech.com/gtirb/files/apt-repo $DIST_NAME $COMPONENT" | tee -a /etc/apt/sources.list
  - apt-get update -y
  - apt-get install -y libcapstone-dev${CAPSTONE_VERSION:+=$CAPSTONE_VERSION}

.build-template: &build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'build'
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - mkdir build && cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=$COMPILER -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DGTIRB_PPRINTER_STRIP_DEBUG_SYMBOLS=On
    - make -j

.test-and-tag-ubuntu-template: &test-and-tag-ubuntu
  stage: test-and-tag
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

build-ubuntu20-gcc:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc-gcov:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  stage: build
  variables:
    OS: 'ubuntu20'
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_CODE_COVERAGE=On
    - make -j
    - make test
    - cd ..
    - gcovr -e build --fail-under-line 40

build-ubuntu20-gcc-debug:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-ubuntu20-clang-debug:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/static:$IMAGE_TAG
  script:
    - !reference [.install-capstone]
    - GTIRB_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ ^release-.* ]] && echo "release-$GTIRB_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb.git -b $GTIRB_BRANCH
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    # Ensure that we produced a .a file instead of a .so.
    - '[ -e lib/libgtirb_pprinter.a ]'
    - '[ ! -e lib/libgtirb_pprinter.so ]'
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V

static-drivers:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/static:$IMAGE_TAG
  needs:
    - build-ci-image-static
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - !reference [.install-capstone]
    - GTIRB_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ ^release-.* ]] && echo "release-$GTIRB_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb.git -b $GTIRB_BRANCH
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_STATIC_DRIVERS=ON
    - make -j
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/gtirb-pprinter


.xform: &xform
  stage: xform
  artifacts:
    when: always
    paths:
      - build
  services:
    - name: docker.grammatech.com/rewriting/gtirb-server
      alias: gtirb-server
  allow_failure: true
  script:
    - curl http://gtirb-server:8000 --retry 30 --retry-connrefused --retry-delay 1
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        curl -F transform=ddisasm -F binary=@$binary --output $binary.gtirb http://gtirb-server:8000/simple ;
        curl -F transform=stack-stamp -F gtirb=@$binary.gtirb --output $binary.stack-stamp.gtirb http://gtirb-server:8000/simple ;
        curl -F transform=shuffle -F gtirb=@$binary.stack-stamp.gtirb --output $binary.stack-stamp.shuffle.gtirb http://gtirb-server:8000/simple ;
        ./build/bin/gtirb-pprinter --ir $binary.stack-stamp.shuffle.gtirb --binary $binary.stack-stamp.shuffle -c "-L$(pwd)/build/lib" ;
      done
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        cp $binary.stack-stamp.shuffle $binary ;
      done

xform-ubuntu20:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs:
    - job: build-ubuntu20-gcc
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *setup-apt
    - *install-deps
  <<: *xform

xform-ubuntu20-clang:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs:
    - job: build-ubuntu20-clang-debug
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *setup-apt
    - *install-deps
  <<: *xform

test-and-tag-xform-ubuntu20:
  variables:
    OS: 'ubuntu20'
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['xform-ubuntu20']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-xform-ubuntu20-clang:
  variables:
    OS: 'ubuntu20'
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['xform-ubuntu20-clang']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-ubuntu20-gcc:
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  <<: *test-and-tag-ubuntu

test-make-install:
  stage: test-and-tag
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
  script:
    - export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - cd build && make install && cd ..
    - rm -rf build
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cp .ci/test-install.cpp test-install.cpp
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - python3 tests/hello_world.py
    - ./test-install hello.gtirb
    - python3 -m unittest discover tests "*_test.py"

# APT packaging related jobs
.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - "CAPSTONE_PKG_VERSION=$(dpkg -s libcapstone-dev | awk '/Version:/ { print $2 }')"
    - echo $CAPSTONE_PKG_VERSION
    - cd build
    - cpack -G "DEB" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib
    - cpack -G "DEB" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib-dbg
    - cpack -G "DEB" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-dev
    - cpack -G "DEB" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver
    - cpack -G "DEB" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver-dbg

build-ubuntu20-packages:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: [build-ubuntu20-gcc]
  variables:
    OS: ubuntu20
  <<: *build-ubuntu-packages

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-packages-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - pushd apt-repo
    - !reference [.setup-apt]
    - >-
      apt-get download
      $(apt-rdepends libgtirb-dev${GTIRB_VERSION:+=$GTIRB_VERSION-$(lsb_release -sc)} | grep -v "^ " | grep -E "gtirb")
      libcapstone-dev${CAPSTONE_VERSION:+=$CAPSTONE_VERSION}
    - dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-pprinter-dev: &test-ubuntu-libgtirb-pprinter-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
      - hello.gtirb
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dev_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - g++ .ci/test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - python3 tests/hello_world.py
    - ./test-install hello.gtirb

.test-ubuntu-gtirb-pprinter: &test-ubuntu-gtirb-pprinter
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    # just checking that gtirb-pprint and gtirb-layout are on $PATH
    - '[ -f  /usr/bin/gtirb-pprinter ]'
    - '[ -f /usr/bin/gtirb-layout ]'

.test-ubuntu-libgtirb-pprinter-dbg: &test-ubuntu-libgtirb-pprinter-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dbg_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb_pprinter.so | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-gtirb-pprinter-dbg: &test-ubuntu-gtirb-pprinter-dbg
  stage: test-packages1
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter-dbg_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/gtirb-pprinter | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-libgtirb-pprinter: &test-ubuntu-libgtirb-pprinter
  stage: test-packages2
  script:
    - echo -e "\ndeb [trusted=yes] file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter_*.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install hello.gtirb

setup-ubuntu20-repo:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-pprinter-dev:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu20-gtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu20-libgtirb-pprinter-dbg:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu20-gtirb-pprinter-dbg:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu20-libgtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo', 'test-ubuntu20-libgtirb-pprinter-dev']
  <<: *test-ubuntu-libgtirb-pprinter

.deploy-debian-installer: &deploy-debian-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.deb'
  script:
    - cp build/*.deb ./

debian-installer-ubuntu20:
  image: ${CI_REGISTRY_IMAGE}/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-packages']
  <<: *deploy-debian-installer

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

.windows-upload: &windows-upload
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [windows-zip-release-package]

windows-upload-public:
  <<: *windows-upload
  rules:
    *publish-rules
  variables:
    JOB_NAME: windows-zip-release-package
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: windows-release

windows-upload-internal:
  <<: *windows-upload
  rules:
    *publish-rules
  variables:
    JOB_NAME: windows-zip-release-package
    FILESERVER: internal
    FILESERVER_SUBDIR_NAME: windows-release

python-manylinux-2010-release:
  stage: build
  needs: [check-format]
  image: ${CI_REGISTRY_IMAGE}/manylinux2010_x86_64:$IMAGE_TAG
  artifacts:
    paths:
      - _build/wheelhouse/*.whl
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  rules:
    *publish-rules
  script:
    - !reference [.setup-conan-linux]
    - RELEASE_VERSION=$([[ $CI_COMMIT_REF_NAME =~ ^release-.* ]] && echo "ON" || echo "OFF")
    - mkdir _build
    - cd _build
    - conan install ..  '--build=*'
    - cmake .. -DENABLE_CONAN=ON -DGTIRB_PPRINTER_BUILD_PYTHON_PACKAGE=ON -DCMAKE_BUILD_TYPE=Release -DGTIRB_PPRINTER_RELEASE_VERSION=$RELEASE_VERSION
    - cmake --build . --target=python-wheel --parallel=$(nproc)
    - auditwheel repair python/dist/*.whl

python-manylinux-2010-test:
  image: python:3.9
  stage: test-packages1
  needs:
    - python-manylinux-2010-release
  rules:
    *publish-rules
  script:
    - pip3 install _build/wheelhouse/gtirb*.whl --extra-index-url=$EXTRA_INDEX_URL
    - gtirb-pprinter --version

python-manylinux-2010-publish-internal:
  image: python:3.9
  stage: deploy
  needs:
    - python-manylinux-2010-release
  rules:
    *publish-rules
  script:
    - cd _build/wheelhouse/
    - pip3 install twine wheel setuptools --upgrade
    - wget https://git.grammatech.com/research/templates/python-module/raw/master/.pypirc
    - sed "s/password = <access token>/password = $GL_PKG_API_TOKEN/" .pypirc > ~/.pypirc
    - pip3 install gtirb_pprinter-*.whl --extra-index-url=$EXTRA_INDEX_URL
    - NEW_VERSION=$(python3 -c "import gtirb_pprinter; print(gtirb_pprinter.__version__)")
    - if [[ "$NEW_VERSION" =~ \.dev[[:digit:]]*(\+.*)?$ && "$CI_COMMIT_REF_NAME" =~ ^release-.* ]]; then exit 1; fi
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        if [[ ! "$NEW_VERSION" =~ \.dev[[:digit:]]*$ ]]; then
          echo "[ERROR] Only .dev versions can be uploaded from the master branch.";
          exit 1;
        fi;
        if pip3 install --extra-index-url=$EXTRA_INDEX_URL "gtirb-pprinter>$NEW_VERSION" 2>/dev/null; then
          echo "[ERROR] The package version being published on master should always be >= the version in the repository.";
          exit 1;
        fi;
        wget https://git.grammatech.com/research/templates/python-module/raw/master/delete_remote_packages.py;
        python3 delete_remote_packages.py $GL_PKG_API_TOKEN gtirb_pprinter-*.whl;
      fi
    - twine check gtirb_pprinter-*.whl
    - twine upload --verbose --repository repypi gtirb_pprinter-*.whl --skip-existing

python-manylinux-2010-publish-external:
  stage: deploy
  image: python:3.9-slim
  needs:
    - python-manylinux-2010-release
  script:
    - cd _build/wheelhouse/
    - pip3 install twine gtirb_pprinter-*.whl
    - VERSION=$(python3 -c "import gtirb_pprinter; print(gtirb_pprinter.__version__)")
    # Do not publish .dev versions on the public pypi
    - if [[ "$VERSION" =~ \.dev[[:digit:]]*.*$ ]]; then exit 1; fi
    - python3 -m twine upload --verbose gtirb_pprinter-*.whl -u __token__ -p $PYPI_API_KEY --skip-existing
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
