variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GTIRB_BRANCH: "release-1.10.3"

default:
  tags: [cluster]

stages:
  - check-format
  - build
  - test-and-tag
  - build-packages
  - test-packages-setup
  - test-packages1
  - test-packages2
  - deploy
  - cleanup

check-format:
  stage: check-format
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

build-conan:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  stage: build
  needs: [check-format]
  script:
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p ${CI_JOB_TOKEN}
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/build.py

conan-windows:
  stage: build
  tags: [gtirb-pprinter-windows]
  script:
    - systeminfo
    # Set up user and remote
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p ${CI_JOB_TOKEN}
    # Run build script
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    - export PATH="$PATH;C:\\Program Files\\CMake\\bin"
    - python .ci/build.py

.build-template: &build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'build'
  script:
    - case $OS in
       ubuntu16) JOB_NAME='debian-installer-ubuntu16' ;;
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
       arch) JOB_NAME='package-arch' ;;
       esac
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb-$OS-artifacts.zip"
    - unzip gtirb-$OS-artifacts.zip
    - '[ $OS != "arch" ] || pacman --noconfirm -U gtirb-git*.pkg.tar.*'
    - '[[ ! "$OS" =~ ubuntu[12][680] ]] || dpkg -i libgtirb.deb libgtirb-dev.deb'
    - mkdir build && cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=$COMPILER -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_RELEASE="$(lsb_release -sc)" -DGTIRB_PPRINTER_STRIP_DEBUG_SYMBOLS=On
    - make -j

.windows-build-template: &windows-build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'gtirb_pprinter-*-win64'
  script:
    - systeminfo
    # Install gtirb
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=build-windows-msvc-${BUILD_TYPE,,} --output "gtirb-artifacts.zip"
    - unzip gtirb-artifacts.zip
    # Build gtirb-pprinter
    - GTIRB_DIR=$(cygpath -m $(realpath $(find ./ -type d -name GTIRB-*-win64)/lib/gtirb))
    - mkdir build
    - cd build
    - LIB_BUILD_TYPE=$(echo $BUILD_TYPE | sed 's/Debug/Debug/;s/RelWithDebInfo/Release/')
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G \"Ninja\" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_CXX_FLAGS=\"/DBOOST_ALL_DYN_LINK\" -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=1 -DCMAKE_LIBRARY_PATH=\"C:\\capstone-${LIB_BUILD_TYPE}\\lib\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Dgtirb_DIR=$GTIRB_DIR .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    # Build ZIP package, and include DLLs needed to run exes.
    - cmd.exe /C "C:\\PROGRA~1\\CMake\\bin\\cpack.exe -G \"ZIP\""
    - ZIP_FILE=(gtirb_pprinter*win64.zip)
    - BASE_DIRECTORY="${ZIP_FILE%.*}"
    - unzip $ZIP_FILE
    - cp /cygdrive/c/Boost/lib/boost_*-vc141-mt$(echo $BUILD_TYPE | sed 's/Debug/-gd/;s/RelWithDebInfo//')-x64-1_67.dll $BASE_DIRECTORY/bin/
    - cp C:\\capstone-${LIB_BUILD_TYPE}\\bin\\capstone.dll $BASE_DIRECTORY/bin/
    - cp $GTIRB_DIR/../../bin/gtirb$(echo $BUILD_TYPE | sed 's/Debug/d/;s/RelWithDebInfo//').{dll,pdb} $BASE_DIRECTORY/bin/
    - cp bin/*.pdb $BASE_DIRECTORY/bin
    - cp -r $BASE_DIRECTORY ../
    - cp $BASE_DIRECTORY/bin/*.dll bin
    - |
      if [ "$BUILD_TYPE" != 'Debug' ]; then
        PP_BIN=$(cygpath -w -a $(pwd)/bin)
        PATH="$PATH;$PP_BIN" cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\ctest.exe -V -C $BUILD_TYPE"
      fi

.test-and-tag-template: &test-and-tag
  stage: test-and-tag
  script:
    - case $OS in
       ubuntu16) JOB_NAME='debian-installer-ubuntu16' ;;
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
       arch) JOB_NAME='package-arch' ;;
       esac
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb-$OS-artifacts.zip"
    - unzip gtirb-$OS-artifacts.zip
    - '[ $OS != "arch" ] || pacman --noconfirm -U gtirb-git*.pkg.tar.*'
    - '[[ ! "$OS" =~ ubuntu[12][680] ]] || dpkg -i libgtirb.deb'
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

build-arch-gcc:
  # TODO: The most recent versions of protobuf on arch break our build.
  # at some point, we'll need to figure this out, but in the meantime,
  # we allow_failure so our pipelines will go through.
  allow_failure: true
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'build'
  script:
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-arch --output "gtirb-arch-artifacts.zip"
    - unzip gtirb-arch-artifacts.zip
    - pacman --noconfirm -U gtirb-git*.pkg.tar.*
    - sed -i "s/^\(OPT_LONG=(\)/\1'asroot' /;s/EUID == 0/1 == 0/" /usr/bin/makepkg
    - mkdir /tmp/aur
    - cp .ci/PKGBUILD /tmp/aur
    - cd /tmp/aur
    - sed -i "s|git://github.com/grammatech/gtirb-pprinter.git|git+file://${CI_PROJECT_DIR}|" PKGBUILD
    - makepkg
    - pacman --noconfirm -U *.pkg.tar.*
    - cp -r /tmp/aur/src/gtirb-pprinter/build $CI_PROJECT_DIR
    - cp *.pkg.tar.* $CI_PROJECT_DIR/build/
    - cd /tmp/aur/src/gtirb-pprinter/build && ctest -V

build-ubuntu16-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu18-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    # Ensure that we produced a .a file instead of a .so.
    - '[ -e lib/libgtirb_pprinter.a ]'
    - '[ ! -e lib/libgtirb_pprinter.so ]'
    # Run the regression tests.
    - PATH=$(pwd)/bin:$PATH ctest -V

static-drivers:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  needs: []
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build/bin
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_STATIC_DRIVERS=ON
    - make -j
    # Run the regression tests.
    - PATH=$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/gtirb-pprinter

build-arch-gcc-debug:
  allow_failure: true
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-arch-clang-debug:
  allow_failure: true
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  variables:
    OS: 'arch'
    COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-windows-msvc-debug:
  variables:
    BUILD_TYPE: 'Debug'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

build-windows-msvc-relwithdebinfo:
  variables:
    BUILD_TYPE: 'RelWithDebInfo'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

test-and-tag-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['build-ubuntu16-gcc']
  <<: *test-and-tag

test-and-tag-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-gcc']
  <<: *test-and-tag

test-and-tag-ubuntu20-gcc:
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-gcc']
  <<: *test-and-tag

test-and-tag-arch-gcc-debug:
  allow_failure: true
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
    BUILD_TYPE: 'Debug'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  needs: ['build-arch-gcc-debug']
  <<: *test-and-tag

test-and-tag-arch-clang-debug:
  allow_failure: true
  variables:
    OS: 'arch'
    COMPILER: 'clang'
    BUILD_TYPE: 'Debug'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  needs: ['build-arch-clang-debug']
  <<: *test-and-tag

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-gcc']
  script:
    - export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu18 --output "gtirb-ubuntu18-artifacts.zip"
    - unzip gtirb-ubuntu18-artifacts.zip
    - dpkg -i libgtirb.deb libgtirb-dev.deb
    - cd build && make install && cd ..
    - rm -rf build
    - cp .ci/test-install.cpp test-install.cpp
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs
    - ./test-install
    - python3 -m unittest discover tests "*_test.py"

.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb-$OS-artifacts.zip"
    - unzip gtirb-$OS-artifacts.zip
    - dpkg -i libgtirb.deb libgtirb-dev.deb
    - cd build
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=lib
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=lib-dbg
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=dev
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=driver
    - cpack -G "DEB" -D CPACK_GTIRB_DEBIAN_PACKAGE=driver-dbg

build-ubuntu16-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: [build-ubuntu16-gcc]
  variables:
    OS: ubuntu16
  <<: *build-ubuntu-packages

build-ubuntu18-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: [build-ubuntu18-gcc]
  variables:
    OS: ubuntu18
  <<: *build-ubuntu-packages

build-ubuntu20-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: [build-ubuntu20-gcc]
  variables:
    OS: ubuntu20
  <<: *build-ubuntu-packages

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-packages-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb-$OS-artifacts.zip"
    - unzip gtirb-$OS-artifacts.zip -d apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-pprinter-dev: &test-ubuntu-libgtirb-pprinter-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb-pprinter-dev
    - if [ $(lsb_release -sc) == "xenial" ]; then CC=g++-7; else CC=g++; fi
    - ${CC} .ci/test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs
    - ./test-install

.test-ubuntu-gtirb-pprinter: &test-ubuntu-gtirb-pprinter
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated gtirb-pprinter
    - gtirb-pprinter tests/two_modules.gtirb
    - gtirb-layout tests/two_modules.gtirb --out output

.test-ubuntu-libgtirb-pprinter-dbg: &test-ubuntu-libgtirb-pprinter-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb-pprinter-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb_pprinter.so | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-gtirb-pprinter-dbg: &test-ubuntu-gtirb-pprinter-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated gtirb-pprinter-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/gtirb-pprinter | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-libgtirb-pprinter: &test-ubuntu-libgtirb-pprinter
  stage: test-packages2
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated libgtirb-pprinter
    - ./test-install

setup-ubuntu16-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['build-ubuntu16-packages']
  variables:
    OS: ubuntu16
  <<: *setup-test-apt-repo

test-ubuntu16-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['setup-ubuntu16-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu16-gtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['setup-ubuntu16-repo']
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu16-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['setup-ubuntu16-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu16-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['setup-ubuntu16-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu16-libgtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['setup-ubuntu16-repo', 'test-ubuntu16-libgtirb-pprinter-dev']
  <<: *test-ubuntu-libgtirb-pprinter

setup-ubuntu18-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-packages']
  variables:
    OS: ubuntu18
  <<: *setup-test-apt-repo

test-ubuntu18-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu18-gtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu18-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu18-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu18-libgtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo', 'test-ubuntu18-libgtirb-pprinter-dev']
  <<: *test-ubuntu-libgtirb-pprinter

setup-ubuntu20-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu20-gtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu20-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu20-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu20-libgtirb-pprinter:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo', 'test-ubuntu20-libgtirb-pprinter-dev']
  <<: *test-ubuntu-libgtirb-pprinter

test-arch-package:
  allow_failure: true
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  needs: ['build-arch-gcc']
  script:
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-arch --output "gtirb-arch-artifacts.zip"
    - unzip gtirb-arch-artifacts.zip
    - pacman --noconfirm -U gtirb-git*.pkg.tar.*
    - pacman --noconfirm -U build/*.pkg.tar.*
    - g++ .ci/test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs
    - ./test-install
    - python3 -m unittest discover tests "*_test.py"

.deploy-debian-installer: &deploy-debian-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.deb'
  script:
    - cp build/*.deb ./

debian-installer-ubuntu16:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu16
  needs: ['build-ubuntu16-packages']
  <<: *deploy-debian-installer

debian-installer-ubuntu18:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-packages']
  <<: *deploy-debian-installer

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  <<: *deploy-debian-installer

package-arch:
  allow_failure: true
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/arch
  needs: ['build-arch-gcc', 'test-arch-package']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.pkg.tar.*'
  script:
    - cp build/*.pkg.tar.* ./
