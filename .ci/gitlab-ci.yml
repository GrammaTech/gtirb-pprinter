variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GTIRB_BRANCH: "release-1.10.6"
  CAPSTONE_BRANCH: "capstone-4.0.2-gt1"
  # The following two variables are used by the package uploader.
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID
  XFORM_BINARIES: "bin/gtirb-pprinter bin/gtirb-layout lib/libgtirb_pprinter.so lib/libgtirb_layout.so"


default:
  tags: [cluster]

stages:
  - check-format
  - build
  - xform
  - test-and-tag
  - build-packages
  - test-packages-setup
  - test-packages1
  - test-packages2
  - deploy
  - deploy-to-apt

check-format:
  stage: check-format
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.linux-conan-template: &linux-conan
  stage: build
  needs: [check-format]
  variables:
    CONAN_PASSWORD: $CI_JOB_TOKEN
  script:
    - pip3 install --upgrade conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/build.py

build-conan-linux-gcc7:
  image: conanio/gcc7
  <<: *linux-conan

build-conan-linux-gcc9:
  image: conanio/gcc9
  <<: *linux-conan

.windows-conan-template: &windows-conan
  stage: build
  tags: [ddisasm-windows]
  script:
    - systeminfo
    - pip3 install --upgrade conan
    # Set up user and remote
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - export CONAN_PASSWORD=$CI_JOB_TOKEN
    - conan user ci_user -r gitlab -p
    # Run build script
    - export PYTHONPATH="$(cygpath -w $(pwd))"
    - export PATH="$PATH;C:\\Program Files\\CMake\\bin"
    - pip3 install --user --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - python .ci/build.py -s build_type=$BUILD_TYPE

.setup-dependencies:
  ubuntu-deps:
    &ubuntu-deps
    - case $OS in
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
       esac
    # download capstone & gtirb
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb.zip"
    - for pkg in gtirb capstone; do unzip $pkg.zip; done
    - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-dev.deb
  centos-deps:
    &centos-deps
    # download capstone & gtirb
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-rpm --output "capstone.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-centos8 --output "gtirb.zip"
    - for pkg in gtirb capstone; do unzip $pkg.zip; done
    - dnf --nogpgcheck localinstall -y capstone-devel-*.rpm libgtirb.rpm libgtirb-devel.rpm

.build-template: &build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'build'
  script:
    - *ubuntu-deps
    - mkdir build && cd build
    - cmake ../ -DCMAKE_CXX_COMPILER=$COMPILER -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DGTIRB_PPRINTER_STRIP_DEBUG_SYMBOLS=On
    - make -j

.test-and-tag-ubuntu-template: &test-and-tag-ubuntu
  stage: test-and-tag
  script:
    - *ubuntu-deps
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

.test-and-tag-centos-template: &test-and-tag-centos
  stage: test-and-tag
  script:
    - *centos-deps
    - mkdir long-dir-name-padding-for-CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    - cd long-dir-name-padding-for-CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    - git clone .. .
    - mv ../build build
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

conan-windows-debug:
  variables:
    BUILD_TYPE: 'Debug'
  <<: *windows-conan

conan-windows-release:
  variables:
    BUILD_TYPE: 'Release'
  <<: *windows-conan

build-ubuntu18-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc-gcov:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  stage: build
  variables:
    OS: 'ubuntu20'
  script:
    - *ubuntu-deps
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_CODE_COVERAGE=On
    - make -j
    - make test
    - cd ..
    - gcovr -e build --fail-under-line 40

build-ubuntu20-gcc-debug:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-ubuntu20-clang-debug:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  variables:
    OS: 'ubuntu20'
    COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  script:
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    # Ensure that we produced a .a file instead of a .so.
    - '[ -e lib/libgtirb_pprinter.a ]'
    - '[ ! -e lib/libgtirb_pprinter.so ]'
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V

static-drivers:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/static
  needs: []
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF -DGTIRB_PY_API=OFF
    - make -j
    - cd ../..
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_STATIC_DRIVERS=ON
    - make -j
    # Run the regression tests.
    - pip3 install --upgrade pip
    - pip3 install -r ${CI_PROJECT_DIR}/tests/requirements.txt $EXTRA_INDEX_URL
    - PATH=$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/gtirb-pprinter

build-centos8-gcc-relwithdebuginfo:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/centos8
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    # What's the deal with PADDED_DIR? See:
    # https://cmake.org/cmake/help/latest/cpack_gen/rpm.html#variable:CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    # From the above link: "...Limitation is that replaced path part must
    # be shorter or of equal length than the length of its replacement.  If
    # that is not the case either CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX variable
    # has to be set to a shorter path or source directories must be placed on
    # a longer path."
    - PADDED_DIR=long-dir-name-padding-for-CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    - mkdir $PADDED_DIR && cd $PADDED_DIR
    - git clone .. .
    - mkdir build && cd build
    - *centos-deps
    - CAPSTONE_PKG_VERSION=$(ls capstone-devel-*.rpm | sed -n 's/capstone-devel-\(.*\).x86_64.rpm/\1/p')
    # Build
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH='/usr/lib64/boost169' -DBOOST_INCLUDEDIR='/usr/include/boost169' -DGTIRB_PPRINTER_STRIP_DEBUG_SYMBOLS=Off ..
    - make
    - cpack -G "RPM" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=rpm-lib
    - cpack -G "RPM" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=rpm-dev
    - cpack -G "RPM" -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=rpm-driver
    - cd ../ && mv build ../build


.xform: &xform
  stage: xform
  artifacts:
    when: always
    paths:
      - build
  services:
    - name: docker.grammatech.com/rewriting/gtirb-server
      alias: gtirb-server
  allow_failure: true
  script:
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        curl -F transform=ddisasm -F binary=@$binary --output $binary.gtirb http://gtirb-server/simple ;
        curl -F transform=stack-stamp -F gtirb=@$binary.gtirb --output $binary.stack-stamp.gtirb http://gtirb-server/simple ;
        curl -F transform=shuffle -F gtirb=@$binary.stack-stamp.gtirb --output $binary.stack-stamp.shuffle.gtirb http://gtirb-server/simple ;
        case "$binary" in
          *.so*) shared="--shared" ;;
          *) shared="" ;;
        esac ;
        ./build/bin/gtirb-pprinter --ir $binary.stack-stamp.shuffle.gtirb --binary $binary.stack-stamp.shuffle -c "-L$(pwd)/build/lib" $shared ;
      done
    - for binary in $XFORM_BINARIES ; do
        binary="build/$binary" ;
        cp $binary.stack-stamp.shuffle $binary ;
      done

xform-ubuntu18:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs:
    - job: build-ubuntu18-gcc
      artifacts: true
  variables:
    OS: ubuntu18
  before_script:
    - *ubuntu-deps
  <<: *xform

xform-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs:
    - job: build-ubuntu20-gcc
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *ubuntu-deps
  <<: *xform

xform-ubuntu20-clang:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs:
    - job: build-ubuntu20-clang-debug
      artifacts: true
  variables:
    OS: ubuntu20
  before_script:
    - *ubuntu-deps
  <<: *xform

xform-centos8:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/centos8
  needs:
    - job: build-centos8-gcc-relwithdebuginfo
      artifacts: true
  before_script:
    - *centos-deps
    - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(pwd)/build/lib"
  <<: *xform

test-and-tag-xform-ubuntu18:
  variables:
    OS: 'ubuntu18'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['xform-ubuntu18']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-xform-ubuntu20:
  variables:
    OS: 'ubuntu20'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['xform-ubuntu20']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-xform-ubuntu20-clang:
  variables:
    OS: 'ubuntu20'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['xform-ubuntu20-clang']
  allow_failure: true
  <<: *test-and-tag-ubuntu

test-and-tag-xform-centos8:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/centos8
  needs: ['xform-centos8']
  allow_failure: true
  <<: *test-and-tag-centos

test-and-tag-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-gcc']
  <<: *test-and-tag-ubuntu

test-and-tag-ubuntu20-gcc:
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-gcc']
  <<: *test-and-tag-ubuntu

test-and-tag-centos8-gcc-relwithdebinfo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/centos8
  needs: ['build-centos8-gcc-relwithdebuginfo']
  <<: *test-and-tag-centos

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: 'ubuntu18'
  script:
    - export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    - *ubuntu-deps
    - cd build && make install && cd ..
    - rm -rf build
    - cp .ci/test-install.cpp test-install.cpp
    - g++ test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - ./test-install tests/two_modules.gtirb
    - pip3 install --upgrade pip
    - pip3 install -r tests/requirements.txt $EXTRA_INDEX_URL
    - python3 -m unittest discover tests "*_test.py"

test-centos8-libgtirb-pprinter-devel:
  stage: test-packages1
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/centos8
  needs: ['build-centos8-gcc-relwithdebuginfo']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - pushd build
    - dnf --nogpgcheck localinstall -y capstone-devel-*.rpm libgtirb.rpm libgtirb-devel.rpm libgtirb-pprinter.rpm libgtirb-pprinter-devel.rpm
    - popd
    - rm -rf build
    - g++ .ci/test-install.cpp -I/usr/include/boost169 -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - ./test-install tests/two_modules.gtirb

test-centos8-gtirb-pprinter:
  stage: test-packages1
  image: centos:centos8
  needs: ['build-centos8-gcc-relwithdebuginfo']
  script:
    - pushd build
    - dnf install -y epel-release
    - dnf update -y
    - dnf --nogpgcheck localinstall -y capstone-devel-*.rpm libgtirb.rpm libgtirb-pprinter.rpm gtirb-pprinter.rpm
    - popd
    - rm -rf build
    - gtirb-pprinter tests/two_modules.gtirb --binary two_modules
    - gtirb-layout tests/two_modules.gtirb --out output

test-centos8-libgtirb-pprinter:
  stage: test-packages2
  image: centos:centos8
  needs:
    - build-centos8-gcc-relwithdebuginfo
    - test-centos8-libgtirb-pprinter-devel
  script:
    - pushd build
    - dnf install -y epel-release
    - dnf update -y
    - dnf --nogpgcheck localinstall -y capstone-devel-*.rpm libgtirb.rpm libgtirb-pprinter.rpm
    - popd
    - rm -rf build
    - ./test-install tests/two_modules.gtirb

package-centos8:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/gtirb/centos8
  needs: ['build-centos8-gcc-relwithdebuginfo', 'test-centos8-libgtirb-pprinter']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.rpm'
  script:
    - cp build/*.rpm ./


# APT packaging related jobs
.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - *ubuntu-deps
    - 'CAPSTONE_PKG_VERSION=$(dpkg -f libcapstone-dev.deb version | sed -E "s/[[:digit:]]+://g")'
    - echo $CAPSTONE_PKG_VERSION
    - cd build
    - CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-lib-dbg
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-dev
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver
    - cpack -G "DEB" -D CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME=$CPACK_GTIRB_PPRINTER_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_GTIRB_PPRINTER_PACKAGE=deb-driver-dbg

build-ubuntu18-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: [build-ubuntu18-gcc]
  variables:
    OS: ubuntu18
  <<: *build-ubuntu-packages

build-ubuntu20-packages:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: [build-ubuntu20-gcc]
  variables:
    OS: ubuntu20
  <<: *build-ubuntu-packages

.setup-test-apt-repo: &setup-test-apt-repo
  stage: test-packages-setup
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb.zip"
    - for pkg in gtirb capstone; do unzip $pkg.zip -d apt-repo; done
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-libgtirb-pprinter-dev: &test-ubuntu-libgtirb-pprinter-dev
  stage: test-packages1
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - test-install
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dev.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - g++ .ci/test-install.cpp -std=c++17 -o test-install -lgtirb_pprinter -lstdc++fs -lgtirb -lgtirb_layout
    - ./test-install tests/two_modules.gtirb

.test-ubuntu-gtirb-pprinter: &test-ubuntu-gtirb-pprinter
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - gtirb-pprinter tests/two_modules.gtirb --binary two_modules
    - gtirb-layout tests/two_modules.gtirb --out output

.test-ubuntu-libgtirb-pprinter-dbg: &test-ubuntu-libgtirb-pprinter-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb_pprinter.so | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-gtirb-pprinter-dbg: &test-ubuntu-gtirb-pprinter-dbg
  stage: test-packages1
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/gtirb-pprinter-dbg.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/gtirb-pprinter | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

.test-ubuntu-libgtirb-pprinter: &test-ubuntu-libgtirb-pprinter
  stage: test-packages2
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/libgtirb-pprinter.deb | sed -n "s/Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ./test-install tests/two_modules.gtirb

setup-ubuntu18-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-packages']
  variables:
    OS: ubuntu18
  <<: *setup-test-apt-repo

test-ubuntu18-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu18-gtirb-pprinter:
  image: ubuntu:18.04
  needs: ['setup-ubuntu18-repo']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release software-properties-common
    - add-apt-repository ppa:mhier/libboost-latest
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu18-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu18-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['setup-ubuntu18-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu18-libgtirb-pprinter:
  image: ubuntu:18.04
  needs: ['setup-ubuntu18-repo', 'test-ubuntu18-libgtirb-pprinter-dev']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release software-properties-common
    - add-apt-repository ppa:mhier/libboost-latest
  <<: *test-ubuntu-libgtirb-pprinter

setup-ubuntu20-repo:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-test-apt-repo

test-ubuntu20-libgtirb-pprinter-dev:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dev

test-ubuntu20-gtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release
  <<: *test-ubuntu-gtirb-pprinter

test-ubuntu20-libgtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-libgtirb-pprinter-dbg

test-ubuntu20-gtirb-pprinter-dbg:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['setup-ubuntu20-repo']
  <<: *test-ubuntu-gtirb-pprinter-dbg

test-ubuntu20-libgtirb-pprinter:
  image: ubuntu:20.04
  needs: ['setup-ubuntu20-repo', 'test-ubuntu20-libgtirb-pprinter-dev']
  before_script:
    - apt-get -y update && apt-get -y install lsb-release
  <<: *test-ubuntu-libgtirb-pprinter

.deploy-debian-installer: &deploy-debian-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*gtirb-pprinter*.deb'
  script:
    - cp build/*.deb ./

debian-installer-ubuntu18:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu18
  needs: ['build-ubuntu18-packages']
  <<: *deploy-debian-installer

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/gtirb-pprinter/ubuntu20
  needs: ['build-ubuntu20-packages']
  <<: *deploy-debian-installer

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

public-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable

internal-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

internal-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable
